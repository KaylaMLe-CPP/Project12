// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int MAX_LENGTH;
    field int length;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        let MAX_LENGTH = maxLength;
        let chars = Array.new(MAX_LENGTH);

        return this;// return this new obj
    }

    /** Disposes this string. */
    // uses array disposal to clear chars
    method void dispose() {
        do Array.dispose(chars);

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j > -1 & j < MAX_LENGTH){
            return chars[j];
        } else{
            return null;
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j > -1 & j < MAX_LENGTH){
            let chars[j] = c;
        }

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < MAX_LENGTH){
            let chars[length] = c;
            let length = length + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0){
            let length = length - 1;
        }

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int buffer;
        var bool negative;
        var int i;
        var int digit;

        let buffer = 0;
        let i = 0;
        while (i < length){
            // ascii code 55 -> hyphen (negative sign)
            if (String.atoi(chars[i]) = 55){
                let negative = true;
                let i = i + 1;

            } else{// I forgot if jack has true elif statements
                let digit = String.digitToI(chars[i]);
                
                if (digit > -1 & digit < 10){
                    let buffer = (buffer * 10) + digit;
                    let i = i + 1;
                }else{
                    let i = length;// break if a nondigit char found
                }
            }
        }

        if (negative){
            let buffer = buffer * -1;
        }

        return buffer;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int intBuffer;
        var int input;

        let input = val;
        let length = 0;

        if (val < 0){
            do appendChar("-");
        }

        while(length < MAX_LENGTH & input > 0){
            let intBuffer = Math.extractDigit(input);
            do appendChar(String.atoi(intBuffer + 48));
            let input = input / 10;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function int digitToI(char digit){
        return digit - 48;
    }

    // does char to i type conversion
    function int atoi(char c){
        return c;
    }
}
