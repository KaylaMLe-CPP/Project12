// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        var int y;

        if (x < 0){
            let y = -x;
        } else{
            let y = x;
        }

        return y;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        // Where x, y >= 0
        var int sum;
        var int shiftedX;
        var int j;

        let sum = 0;
        let shiftedX = x;
        let j = 0;

        while (j < 16){// 16 bit ints (n = 16)
            if (Math.getBit(y, j)){// if jth bit of y is 1
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX * 2;
            let j = j + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int xSign;// xor gate these signs?
        var int ySign;
        var int q;
        var int quotient;

        if (y > x){
            return 0;
        }

        let q = Math.divide(x, 2 * y);

        if ((x - 2) * q * y < y){
            let quotient = 2 * q;
        } else{
            let quotient = (2 * q) + 1;
        }

        let xSign = x < 0;
        let ySign = y < 0;

        // positive if signs are equal
        if (xSign = ySign){
            return quotient;
        } else{
            return -quotient;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
        var int twoJ;
        var int yTwoJ;

        let y = 0;
        let j = 0;

        while (j < 8){// 16/2 - 1 = 7
            let twoJ = Math.pow(2, j);
            let yTwoJ = Math.pow(y + twoJ, 2);

            if (yTwoJ < x | yTwoJ = x){
                let y = y + twoJ;
            }

            let j = j + 1;
        }

        return y;
    }

    function int pow(int base, int exp){
        var int i;
        var int product;

        let i = 0;
        let product = 1;// n ^ 0 = 1

        while (i < exp){
            let product = product * base;
            let i = i + 1;
        }

        return product;
    }

    /** Returns the greater number. */
    // returns the first input if a >= b
    function int max(int a, int b) {
        if (b > a){
            return b;
        } else{
            return a;
        }
    }

    /** Returns the smaller number. */
    // returns the first input if a <= b
    function int min(int a, int b) {
        if (b < a){
            return b;
        } else{
            return a;
        }
    }

    // returns the ith bit of x
    function bool getBit(int x, int i){
        var int twoI;

        let twoI = Math.pow(2, i);
        return (twoI & x) = 1;
    }

    // returns the least significant digit of num
    function int extractDigit(int num){
        var int modTen;
        var int leastSignificant;

        let modTen = Math.divide(num, 10);
        let leastSignificant = num - (10 * modTen);

        return leastSignificant;
    }
}
